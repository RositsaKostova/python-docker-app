on:
  push:

      
jobs:

  linting:
    runs-on: ubuntu-latest
    steps:
      - name: Clone repository
        uses: actions/checkout@v3

      - name: Set up Flake8
        run: |
          pip install --upgrade pip
          pip install flake8

      - name: Run Flake8 checks
        run: flake8 src/app_test.py

  editorconfig_lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install Editor-Conf-Checker
        run: pip install editorconfig-checker

      - name: Editor-Conf Check
        run: ec -version
        
  markdown_file_check:
   runs-on: ubuntu-latest
   steps:
    - name: Checkout Repository
      uses: actions/checkout@v3

    - name: Markdown Link Validation
      uses: ruzickap/action-my-markdown-link-checker@v1.1.2
      
  database_migrations:
  
    runs-on: ubuntu-latest
    needs: [linting, editorconfig_lint, markdown_file_check]
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_DB: db
          POSTGRES_USER: user
          POSTGRES_PASSWORD: password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v2
      - uses: joshuaavalon/flyway-action@v3.0.0
        with:
          url: jdbc:postgresql://postgres:5432/db
          user: user
          password: password
      - run: echo 'testing'

  unit_testing:
    runs-on: ubuntu-latest
    needs: [linting, markdown_file_check, editorconfig_lint]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r ./src/requirements.txt

      - name: Run tests
        run: |
          export PYTHONPATH=./src
          python3 -m unittest src/app_test.py
          
  SonarCloudTest:
    runs-on: ubuntu-latest
    permissions:
     packages: write
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: SonarCloud Scan
      uses: sonarsource/sonarcloud-github-action@v2.0.0
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_PROJECT_KEY: ${{ secrets.SONAR_PROJECT_KEY }}  # Твоят проектен ключ
        SONAR_ORG_KEY: ${{ secrets.SONAR_ORG_KEY }}        # Твоята организация
        SONAR_HOST_URL: "https://sonarcloud.io"

  SnykScan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Run Snyk Security Check
        working-directory: ${{github.workspace}}/src
        run: |
          pip install -r requirements.txt
          npm install -g snyk
          snyk auth ${{secrets.SNYK_TOKEN}}
          snyk test
          
  
  GitLeaksCheck:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          
      - name: Gitleaks check
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  CodeCov:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@master
        with:
           python-version: 3.7
     
      - name: Check code coverage
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}     
          working-directory: .

  SecScan2:
     runs-on: ubuntu-latest
     steps:
       - name: Checkout code
         uses: actions/checkout@v3
        
       - name: Perform Scan
         uses: ShiftLeftSecurity/scan-action@master
         with:
           type: "python"
         env:
          WORKSPACE: .
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
  Build_Push:
     runs-on: ubuntu-latest
     permissions:
      packages: write
     steps:
      - name: Checkout code
        uses: actions/checkout@v3 

      - name: Clear Docker Cache
        run: docker builder prune -a -f
        
      - name: Docker Login
        uses: docker/login-action@v3
        with:
          registry: docker.io
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
    
      - name: Build an image
        run: docker build -t "python-docker-app" .

      - name: AquaSec Trivy
        uses: aquasecurity/trivy-action@0.13.1
        with:
          image-ref: "python-docker-app"
          scan-ref: .  #its the default code
          exit-code: 1
          timeout: 3m0s
          vuln-type: "os,library" #optional, default
          severity: "CRITICAL"        
        
      - name: Tag an image 
        run: docker tag python-docker-app rositsakostova/python-docker-app:latest

      - name: Push Image to Dockerhub  
        run: docker push rositsakostova/python-docker-app:latest
